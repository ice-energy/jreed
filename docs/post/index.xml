<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on JohnnyReedProjects</title>
    <link>https://ice-energy.github.io/jreed/post/</link>
    <description>Recent content in Posts on JohnnyReedProjects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Oct 2018 12:50:00 +0000</lastBuildDate>
    
	<atom:link href="https://ice-energy.github.io/jreed/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1-Wire Notes</title>
      <link>https://ice-energy.github.io/jreed/post/post_012/onewirenotes/</link>
      <pubDate>Fri, 05 Oct 2018 12:50:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_012/onewirenotes/</guid>
      <description>Quick Summary This is a placeholder for notes and pics of 1-Wire stuff.
CMD_READ_SCRATCHPAD The following picture shows the 1-Wire Protocol for when the CMD_READ_SCRATCHPAD command is sent.
 55, 28,FF,71,10,B2,17,01,FF, BE (write)  Followed by:
 92,01,4B,46,7F,FF,0C,10,B5 (read)  Where:
 - 0xBE on the write-side is CMD_READ_SCRATCHPAD - 5th byte read on the read side is SCRATCHPAD_CONFIG_REGISTER - 0x7F = TEMP_RESOLUTION_12_BIT  And here is the device id from the 1-Wire configuration:</description>
    </item>
    
    <item>
      <title>MikroTik Client Configuration</title>
      <link>https://ice-energy.github.io/jreed/post/post_011/mikrotik_client/</link>
      <pubDate>Fri, 17 Aug 2018 09:20:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_011/mikrotik_client/</guid>
      <description>Quick Summary This document has a series of screenshots along with explanations, that will walk you through an example of setting up a MikroTik as the Client.
The basic config strategy is: CPE. CPE is an abbreviation for Customer Premises Equipment.
Translation: it&amp;rsquo;s a WiFi Bridge to a Wireless Access Point.
The WiFi Bridge is a substitute for a wired connection. A setup like this can be used instead of physically running ethernet cable.</description>
    </item>
    
    <item>
      <title>MikroTik PapaBear Configuration</title>
      <link>https://ice-energy.github.io/jreed/post/post_010/mikrotik_papabear/</link>
      <pubDate>Wed, 18 Jul 2018 12:19:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_010/mikrotik_papabear/</guid>
      <description>Quick Summary This document has a series of screenshots along with explanations, that will walk you through an example of setting up a MikroTik as the PapaBear Master.
The basic config strategy is: Wisp AP/Bridged.
Translation: it&amp;rsquo;s a WiFi Access Point to an existing network, where all the traffic is bridged to the existing router.
In practice then, users can connect to this Access Point in the standard way, and it&amp;rsquo;s all one big happy (common) network.</description>
    </item>
    
    <item>
      <title>Github Plus Hugo</title>
      <link>https://ice-energy.github.io/jreed/post/post_009/githubhugo/</link>
      <pubDate>Thu, 31 May 2018 12:19:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_009/githubhugo/</guid>
      <description>Hugo is an open-source static website generator. It has many themes and many layouts ready to choose from. Content in Hugo consists of posts that you add using markdown format, and the posts are arranged in a logical directory tree structure. See the Hugo site here: Hugo Website.
I put together 3 Hugo sites, using the same set of post files. Have a quick look:
 ice-energy.github.io/jreed ice-energy.github.io/user1 ice-energy.github.io/user9  3 questions you probably have after looking at that:</description>
    </item>
    
    <item>
      <title>Wall Mounted Desktop</title>
      <link>https://ice-energy.github.io/jreed/post/post_008/wallmounted_desktop/</link>
      <pubDate>Sat, 26 May 2018 12:19:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_008/wallmounted_desktop/</guid>
      <description>I put together this computer largely from spare parts and Amazon points from my Amex. So barely cost anything, and I thought it would be perfect as a server for Zoneminder.
This was built with the intention of putting it in an enclosure. It started out sitting on my bookshelf, where I used some half-inch standoffs to raise it up. Here&amp;rsquo;s a pic:
It sat there a few weeks. &amp;nbsp; I looked at a few enclosures, almost threw down on one.</description>
    </item>
    
    <item>
      <title>IceBear Control Using PLC</title>
      <link>https://ice-energy.github.io/jreed/post/post_007/plc_controls_icebear/</link>
      <pubDate>Fri, 25 May 2018 14:55:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_007/plc_controls_icebear/</guid>
      <description>Quick Summary: An off-the-shelf external controller may be used to interface directly with the CDC controller to control the IceBears&amp;rsquo; cycle of Making Ice and Providing Cooling. An example scenario will be shown using a PLC-type controller with a Modbus interface that is used to control an IceBear AND ALSO extract data from it.
CDC Controller GPIO Inputs: The CDC controller has 8 GPIO inputs as shown in the above picture:</description>
    </item>
    
    <item>
      <title>CDC3_Host</title>
      <link>https://ice-energy.github.io/jreed/post/post_002/cdc3_host/</link>
      <pubDate>Wed, 23 May 2018 15:52:28 -0700</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_002/cdc3_host/</guid>
      <description>Quick Summary This document describes the architecture of the CDC3 Host Interface, where the platform for execution is a Linux box. &amp;lsquo;Interface&amp;rsquo; is a physical USB connection between the Linux box and the CDC3 Control Processor.
The Host Interface implements a fairly standard packet exchange mechanism, where data packets of size LESS THAN 256 are exchanged with the CDC3 Processor.
serial_recv Module The serial_recv Module accepts input packets from the CDC3 Processor, and then routes them forward to other modules to do the actual work that is requested.</description>
    </item>
    
    <item>
      <title>Proj_Ready_For_Pic</title>
      <link>https://ice-energy.github.io/jreed/post/post_001/proj_readyforpic/</link>
      <pubDate>Fri, 11 May 2018 21:52:28 -0700</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_001/proj_readyforpic/</guid>
      <description>Hello World Random Random Random</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://ice-energy.github.io/jreed/post/post_005/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://ice-energy.github.io/jreed/post/post_005/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>